// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyCar.Context;

#nullable disable

namespace MyCar.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyCar.Models.AdvertisingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarModelId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId")
                        .IsUnique();

                    b.HasIndex("UserModelId")
                        .IsUnique();

                    b.ToTable("Advertisings");
                });

            modelBuilder.Entity("MyCar.Models.CarAcessoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Acessory")
                        .HasColumnType("longtext");

                    b.Property<int>("CarModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.ToTable("CarAcessories");
                });

            modelBuilder.Entity("MyCar.Models.CarLocationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarModelId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.ToTable("CarLocations");
                });

            modelBuilder.Entity("MyCar.Models.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext");

                    b.Property<string>("CRV")
                        .HasColumnType("longtext");

                    b.Property<int>("CarDoorAmount")
                        .HasColumnType("int");

                    b.Property<string>("CarSeatLiner")
                        .HasColumnType("longtext");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<string>("Fuel")
                        .HasColumnType("longtext");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Mileage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Model")
                        .HasColumnType("longtext");

                    b.Property<string>("Plate")
                        .HasColumnType("longtext");

                    b.Property<string>("Transmission")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .HasColumnType("longtext");

                    b.Property<string>("Year")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("MyCar.Models.CarPhotoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarModelId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.ToTable("CarPhotos");
                });

            modelBuilder.Entity("MyCar.Models.EmailModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("longtext");

                    b.Property<int>("CodeValidation")
                        .HasColumnType("int");

                    b.Property<string>("Receiver")
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("MyCar.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyCar.Models.UserRegisterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentPhoto")
                        .HasColumnType("longtext");

                    b.Property<string>("FacePhoto")
                        .HasColumnType("longtext");

                    b.Property<int>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId")
                        .IsUnique();

                    b.ToTable("UserRegisters");
                });

            modelBuilder.Entity("MyCar.Models.AdvertisingModel", b =>
                {
                    b.HasOne("MyCar.Models.CarModel", "CarModel")
                        .WithOne("Advertising")
                        .HasForeignKey("MyCar.Models.AdvertisingModel", "CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCar.Models.UserModel", "UserModel")
                        .WithOne("AdvertisingModel")
                        .HasForeignKey("MyCar.Models.AdvertisingModel", "UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("MyCar.Models.CarAcessoryModel", b =>
                {
                    b.HasOne("MyCar.Models.CarModel", "CarModel")
                        .WithMany("CarAcessories")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("MyCar.Models.CarLocationModel", b =>
                {
                    b.HasOne("MyCar.Models.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("MyCar.Models.CarModel", b =>
                {
                    b.HasOne("MyCar.Models.CarLocationModel", "CarLocationModel")
                        .WithOne()
                        .HasForeignKey("MyCar.Models.CarModel", "LocationId");

                    b.Navigation("CarLocationModel");
                });

            modelBuilder.Entity("MyCar.Models.CarPhotoModel", b =>
                {
                    b.HasOne("MyCar.Models.CarModel", "CarModel")
                        .WithMany("CarPhotos")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("MyCar.Models.UserRegisterModel", b =>
                {
                    b.HasOne("MyCar.Models.UserModel", "UserModel")
                        .WithOne("UserRegisterModel")
                        .HasForeignKey("MyCar.Models.UserRegisterModel", "UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("MyCar.Models.CarModel", b =>
                {
                    b.Navigation("Advertising");

                    b.Navigation("CarAcessories");

                    b.Navigation("CarPhotos");
                });

            modelBuilder.Entity("MyCar.Models.UserModel", b =>
                {
                    b.Navigation("AdvertisingModel");

                    b.Navigation("UserRegisterModel");
                });
#pragma warning restore 612, 618
        }
    }
}
